# To run this pipeline next variables should be set or changed in UI:
# - environment (dev / prod / uat / etc...)
# - location (eus / eus2 / cus / etc...)
# - application_name (sccr-azure as example here. it's a folder name where *.tf files located)

trigger: none

parameters:
  - name: application_name
    type: string
    default: sccr-azure
    values:
      - sccr-azure
      - sccr-azure-network
      - sccr-azure-aks

variables:
  provider: 'azurerm'
  terraformVersion: '1.4.4'
  backendServiceArm: 'sccr-azure-sc'
  azureSubscriptionEndpoint: 'sccr-azure-sc'
  environmentServiceNameAzureRM: 'sccr-azure-sc'
  backendAzureRmResourceGroupName: 'RG-$(location)-SCCSPOC-$(environment)'
  backendAzureRmStorageAccountName: 'storeusddevopssccr'
  backendAzureRmContainerName: 'tfstate'
  backendAzureRmKey: 'tf-${{ parameters.application_name }}-state/$(location)-${{ parameters.application_name }}-$(environment).tfstate'
  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/applications/${{ parameters.application_name }}'
  var-file: '$(System.DefaultWorkingDirectory)/terraform/environments/$(location)/$(environment)/$(environment).tfvars'
  
pool:
  name: SCCR_POC
  # name: 'Azure Pipelines'
  # vmImage: 'ubuntu-latest'

stages:
- stage: TerraformValidate #validates Terraform configuration
  displayName: 'Terraform Validate'
  jobs:
  - job: Validate
    displayName: 'Validate'
    steps:
    - checkout: self
      submodules: recursive
    - task: TerraformTaskV4@4
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        azureSubscriptionEndpoint: '$(backendServiceArm)'
        backendServiceArm: '$(backendServiceArm)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
        command: 'init'
        workingDirectory: '$(workingDirectory)'
        terraformVersion: '$(terraformVersion)'
    - task: TerraformTaskV4@4
      displayName: 'terraform validate'
      inputs:
        provider: 'azurerm'
        azureSubscriptionEndpoint: '$(backendServiceArm)'
        backendServiceArm: '$(backendServiceArm)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
        command: 'validate'
        workingDirectory: '$(workingDirectory)'
        terraformVersion: '$(terraformVersion)'

- stage: TerraformPlan #Prepares Terraform plan and outputs it to an artifact that will be used in next stage
  displayName: 'Terraform Plan'
  condition: succeeded('TerraformValidate')
  jobs:
  - job: Plan
    displayName: 'Plan'
    steps:
    - checkout: self
      submodules: recursive
    - task: TerraformTaskV4@4
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        azureSubscriptionEndpoint: '$(backendServiceArm)'
        backendServiceArm: '$(backendServiceArm)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
        command: 'init'
        workingDirectory: '$(workingDirectory)'
        terraformVersion: '$(terraformVersion)'
    - task: TerraformTaskV4@4
      displayName: 'terraform plan'
      inputs:
        provider: 'azurerm'
        azureSubscriptionEndpoint: '$(backendServiceArm)'
        backendServiceArm: '$(backendServiceArm)'
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
        command: 'plan'
        environment: '${{ variables.environment }}'
        workingDirectory: '$(workingDirectory)'
        terraformVersion: '$(terraformVersion)'
        commandOptions: '-out=${{ parameters.application_name }}.tfplan -var-file=$(var-file)'
    - task: PublishPipelineArtifact@1
      displayName: 'upload tf-plan artifact'
      inputs:
        artifactName: '${{ parameters.application_name }}.tfplan'
        targetPath: '$(workingDirectory)'

- stage: DeploymentValidation  #this stage works as Approve for Deployment, if Terraform plan looks good.
  displayName: 'Deploy Validation'
  condition: succeeded('TerraformPlan')
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation  
    pool: server    
    steps:   
    - task: ManualValidation@0
      timeoutInMinutes: 10 # task times out in 10 minutes and stops the deployment
      inputs:
          instructions: 'Please validate the Terraform Plan and resume'
          onTimeout: 'reject'

- stage: TerraformDeploy #Terraform apply stage, where actual deployment happening.
  displayName: 'Terraform Apply'
  condition: succeeded('DeploymentValidation')
  jobs:
  - job: Deploy
    displayName: 'Deploy'
    steps:
    - checkout: self
      submodules: recursive
    - task: DownloadPipelineArtifact@2
      displayName: 'download tf-plan artifact'
      inputs:
        buildType: 'current'
        artifactName: '${{ parameters.application_name }}.tfplan'
        targetPath: '$(workingDirectory)'
    - task: CmdLine@2
      displayName: 'delete terraform cache'
      inputs:
        script: |
          rm -rf .terraform
        workingDirectory: '$(workingDirectory)'
    - task: TerraformTaskV4@4
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        azureSubscriptionEndpoint: '$(backendServiceArm)'
        backendServiceArm: '$(backendServiceArm)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
        command: 'init'
        commandOptions: '-upgrade'
        workingDirectory: '$(workingDirectory)'
        terraformVersion: '$(terraformVersion)'
    - task: TerraformTaskV4@4
      displayName: 'terraform apply'
      inputs:
        provider: 'azurerm'
        azureSubscriptionEndpoint: '$(backendServiceArm)'
        backendServiceArm: '$(backendServiceArm)'
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
        command: 'apply'
        environment: '$(environment)'
        workingDirectory: '$(workingDirectory)'
        terraformVersion: '$(terraformVersion)'
        commandOptions: '--auto-approve ${{ parameters.application_name }}.tfplan'

- stage: DestroyValidation  #this stage works as Auto-Destroy feature. It will automatically destroy environment in 9 hours, by resuming the pipeline.
  displayName: 'Destroy Validation'
  condition: succeeded('TerraformDeploy')
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation  
    pool: server    
    steps:   
    - task: ManualValidation@0
      timeoutInMinutes: 10 #task times out in 10 minutes and stops the destroy
      inputs:
          instructions: 'Please resume in case environment should be Destroyed.'
          onTimeout: 'reject'

- stage: TerraformDestroy #Destroys the environment
  displayName: 'Terraform Destroy'
  condition: succeeded('DestroyValidation')
  jobs:
  - job: Destroy
    displayName: 'Destroy'
    steps:
    - checkout: self
      submodules: recursive
    - task: TerraformTaskV4@4
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        azureSubscriptionEndpoint: '$(backendServiceArm)'
        backendServiceArm: '$(backendServiceArm)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
        command: 'init'
        workingDirectory: '$(workingDirectory)'
        terraformVersion: '$(terraformVersion)'
    - task: TerraformTaskV4@4
      displayName: 'terraform destroy'
      inputs:
        provider: 'azurerm'
        azureSubscriptionEndpoint: '$(backendServiceArm)'
        backendServiceArm: '$(backendServiceArm)'
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
        command: 'destroy'
        environment: '$(environment)'
        workingDirectory: '$(workingDirectory)'
        terraformVersion: '$(terraformVersion)'
        commandOptions: '--auto-approve -var-file=$(var-file)'
